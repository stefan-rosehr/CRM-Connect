'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.42000
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSQLDataLake"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSQLDataLake
    Inherits Global.System.Data.DataSet
    
    Private tableGeneralJournalAccountEntryStaging As GeneralJournalAccountEntryStagingDataTable
    
    Private tableVW_GeneralJournalEntryDiff As VW_GeneralJournalEntryDiffDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GeneralJournalAccountEntryStaging")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralJournalAccountEntryStagingDataTable(ds.Tables("GeneralJournalAccountEntryStaging")))
            End If
            If (Not (ds.Tables("VW_GeneralJournalEntryDiff")) Is Nothing) Then
                MyBase.Tables.Add(New VW_GeneralJournalEntryDiffDataTable(ds.Tables("VW_GeneralJournalEntryDiff")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GeneralJournalAccountEntryStaging() As GeneralJournalAccountEntryStagingDataTable
        Get
            Return Me.tableGeneralJournalAccountEntryStaging
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_GeneralJournalEntryDiff() As VW_GeneralJournalEntryDiffDataTable
        Get
            Return Me.tableVW_GeneralJournalEntryDiff
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSQLDataLake = CType(MyBase.Clone,dsSQLDataLake)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("GeneralJournalAccountEntryStaging")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralJournalAccountEntryStagingDataTable(ds.Tables("GeneralJournalAccountEntryStaging")))
            End If
            If (Not (ds.Tables("VW_GeneralJournalEntryDiff")) Is Nothing) Then
                MyBase.Tables.Add(New VW_GeneralJournalEntryDiffDataTable(ds.Tables("VW_GeneralJournalEntryDiff")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGeneralJournalAccountEntryStaging = CType(MyBase.Tables("GeneralJournalAccountEntryStaging"),GeneralJournalAccountEntryStagingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGeneralJournalAccountEntryStaging) Is Nothing) Then
                Me.tableGeneralJournalAccountEntryStaging.InitVars
            End If
        End If
        Me.tableVW_GeneralJournalEntryDiff = CType(MyBase.Tables("VW_GeneralJournalEntryDiff"),VW_GeneralJournalEntryDiffDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_GeneralJournalEntryDiff) Is Nothing) Then
                Me.tableVW_GeneralJournalEntryDiff.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSQLDataLake"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSQLDataLake.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGeneralJournalAccountEntryStaging = New GeneralJournalAccountEntryStagingDataTable()
        MyBase.Tables.Add(Me.tableGeneralJournalAccountEntryStaging)
        Me.tableVW_GeneralJournalEntryDiff = New VW_GeneralJournalEntryDiffDataTable()
        MyBase.Tables.Add(Me.tableVW_GeneralJournalEntryDiff)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeGeneralJournalAccountEntryStaging() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeVW_GeneralJournalEntryDiff() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSQLDataLake = New dsSQLDataLake()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub GeneralJournalAccountEntryStagingRowChangeEventHandler(ByVal sender As Object, ByVal e As GeneralJournalAccountEntryStagingRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub VW_GeneralJournalEntryDiffRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_GeneralJournalEntryDiffRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GeneralJournalAccountEntryStagingDataTable
        Inherits Global.System.Data.TypedTableBase(Of GeneralJournalAccountEntryStagingRow)
        
        Private columnDEFINITIONGROUP As Global.System.Data.DataColumn
        
        Private columnEXECUTIONID As Global.System.Data.DataColumn
        
        Private columnISSELECTED As Global.System.Data.DataColumn
        
        Private columnTRANSFERSTATUS As Global.System.Data.DataColumn
        
        Private columnJOURNALNUMBER As Global.System.Data.DataColumn
        
        Private columnVOUCHER As Global.System.Data.DataColumn
        
        Private columnACCOUNTINGDATE As Global.System.Data.DataColumn
        
        Private columnPOSTINGLAYER As Global.System.Data.DataColumn
        
        Private columnLEDGERACCOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYCODE As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYCREDITAMOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYDEBITAMOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnACCOUNTINGCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnREPORTINGCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnQUANTITY As Global.System.Data.DataColumn
        
        Private columnPOSTINGTYPE As Global.System.Data.DataColumn
        
        Private columnJOURNALCATEGORY As Global.System.Data.DataColumn
        
        Private columnISCORRECTION As Global.System.Data.DataColumn
        
        Private columnISCREDIT As Global.System.Data.DataColumn
        
        Private columnACKNOWLEDGEMENTDATE As Global.System.Data.DataColumn
        
        Private columnDOCUMENTDATE As Global.System.Data.DataColumn
        
        Private columnDOCUMENTNUMBER As Global.System.Data.DataColumn
        
        Private columnLEDGERNAME As Global.System.Data.DataColumn
        
        Private columnGENERALJOURNALACCOUNTENTRYRECID As Global.System.Data.DataColumn
        
        Private columnACCOUNTDISPLAYVALUE As Global.System.Data.DataColumn
        
        Private columnPARTITION As Global.System.Data.DataColumn
        
        Private columnCUSTACCOUNT As Global.System.Data.DataColumn
        
        Private columnCUSTINVOICE As Global.System.Data.DataColumn
        
        Private columnVENDACCOUNT As Global.System.Data.DataColumn
        
        Private columnVENDINVOICE As Global.System.Data.DataColumn
        
        Private columnCUSTSETTLEINVOICE As Global.System.Data.DataColumn
        
        Private columnVENDSETTLEINVOICE As Global.System.Data.DataColumn
        
        Private columnDATAAREAID As Global.System.Data.DataColumn
        
        Private columnSYNCSTARTDATETIME As Global.System.Data.DataColumn
        
        Private columnRECID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GeneralJournalAccountEntryStaging"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEFINITIONGROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEFINITIONGROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EXECUTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXECUTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISSELECTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSELECTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSFERSTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSFERSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property JOURNALNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOURNALNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VOUCHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOUCHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POSTINGLAYERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTINGLAYER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LEDGERACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEDGERACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYCREDITAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYCREDITAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYDEBITAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYDEBITAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTINGCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTINGCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property REPORTINGCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPORTINGCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POSTINGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTINGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property JOURNALCATEGORYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOURNALCATEGORY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISCORRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISCORRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISCREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISCREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACKNOWLEDGEMENTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACKNOWLEDGEMENTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOCUMENTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOCUMENTNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LEDGERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEDGERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GENERALJOURNALACCOUNTENTRYRECIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENERALJOURNALACCOUNTENTRYRECID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTDISPLAYVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTDISPLAYVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PARTITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARTITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTSETTLEINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTSETTLEINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDSETTLEINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDSETTLEINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATAAREAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATAAREAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SYNCSTARTDATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYNCSTARTDATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RECIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GeneralJournalAccountEntryStagingRow
            Get
                Return CType(Me.Rows(index),GeneralJournalAccountEntryStagingRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event GeneralJournalAccountEntryStagingRowChanging As GeneralJournalAccountEntryStagingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event GeneralJournalAccountEntryStagingRowChanged As GeneralJournalAccountEntryStagingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event GeneralJournalAccountEntryStagingRowDeleting As GeneralJournalAccountEntryStagingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event GeneralJournalAccountEntryStagingRowDeleted As GeneralJournalAccountEntryStagingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddGeneralJournalAccountEntryStagingRow(ByVal row As GeneralJournalAccountEntryStagingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddGeneralJournalAccountEntryStagingRow( _
                    ByVal DEFINITIONGROUP As String,  _
                    ByVal EXECUTIONID As String,  _
                    ByVal ISSELECTED As Integer,  _
                    ByVal TRANSFERSTATUS As Integer,  _
                    ByVal JOURNALNUMBER As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal ACCOUNTINGDATE As Date,  _
                    ByVal POSTINGLAYER As Integer,  _
                    ByVal LEDGERACCOUNT As String,  _
                    ByVal TRANSACTIONCURRENCYCODE As String,  _
                    ByVal TRANSACTIONCURRENCYCREDITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYDEBITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYAMOUNT As Decimal,  _
                    ByVal ACCOUNTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal REPORTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal QUANTITY As Decimal,  _
                    ByVal POSTINGTYPE As Integer,  _
                    ByVal JOURNALCATEGORY As Integer,  _
                    ByVal ISCORRECTION As String,  _
                    ByVal ISCREDIT As String,  _
                    ByVal ACKNOWLEDGEMENTDATE As Date,  _
                    ByVal DOCUMENTDATE As Date,  _
                    ByVal DOCUMENTNUMBER As String,  _
                    ByVal LEDGERNAME As String,  _
                    ByVal GENERALJOURNALACCOUNTENTRYRECID As Long,  _
                    ByVal ACCOUNTDISPLAYVALUE As String,  _
                    ByVal PARTITION As String,  _
                    ByVal CUSTACCOUNT As String,  _
                    ByVal CUSTINVOICE As String,  _
                    ByVal VENDACCOUNT As String,  _
                    ByVal VENDINVOICE As String,  _
                    ByVal CUSTSETTLEINVOICE As String,  _
                    ByVal VENDSETTLEINVOICE As String,  _
                    ByVal DATAAREAID As String,  _
                    ByVal SYNCSTARTDATETIME As Date,  _
                    ByVal RECID As Long) As GeneralJournalAccountEntryStagingRow
            Dim rowGeneralJournalAccountEntryStagingRow As GeneralJournalAccountEntryStagingRow = CType(Me.NewRow,GeneralJournalAccountEntryStagingRow)
            Dim columnValuesArray() As Object = New Object() {DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNUMBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYCODE, TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURRENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGCURRENCYAMOUNT, DESCRIPTION, QUANTITY, POSTINGTYPE, JOURNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUMENTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINVOICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID}
            rowGeneralJournalAccountEntryStagingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGeneralJournalAccountEntryStagingRow)
            Return rowGeneralJournalAccountEntryStagingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GeneralJournalAccountEntryStagingDataTable = CType(MyBase.Clone,GeneralJournalAccountEntryStagingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GeneralJournalAccountEntryStagingDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEFINITIONGROUP = MyBase.Columns("DEFINITIONGROUP")
            Me.columnEXECUTIONID = MyBase.Columns("EXECUTIONID")
            Me.columnISSELECTED = MyBase.Columns("ISSELECTED")
            Me.columnTRANSFERSTATUS = MyBase.Columns("TRANSFERSTATUS")
            Me.columnJOURNALNUMBER = MyBase.Columns("JOURNALNUMBER")
            Me.columnVOUCHER = MyBase.Columns("VOUCHER")
            Me.columnACCOUNTINGDATE = MyBase.Columns("ACCOUNTINGDATE")
            Me.columnPOSTINGLAYER = MyBase.Columns("POSTINGLAYER")
            Me.columnLEDGERACCOUNT = MyBase.Columns("LEDGERACCOUNT")
            Me.columnTRANSACTIONCURRENCYCODE = MyBase.Columns("TRANSACTIONCURRENCYCODE")
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYCREDITAMOUNT")
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYDEBITAMOUNT")
            Me.columnTRANSACTIONCURRENCYAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYAMOUNT")
            Me.columnACCOUNTINGCURRENCYAMOUNT = MyBase.Columns("ACCOUNTINGCURRENCYAMOUNT")
            Me.columnREPORTINGCURRENCYAMOUNT = MyBase.Columns("REPORTINGCURRENCYAMOUNT")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnQUANTITY = MyBase.Columns("QUANTITY")
            Me.columnPOSTINGTYPE = MyBase.Columns("POSTINGTYPE")
            Me.columnJOURNALCATEGORY = MyBase.Columns("JOURNALCATEGORY")
            Me.columnISCORRECTION = MyBase.Columns("ISCORRECTION")
            Me.columnISCREDIT = MyBase.Columns("ISCREDIT")
            Me.columnACKNOWLEDGEMENTDATE = MyBase.Columns("ACKNOWLEDGEMENTDATE")
            Me.columnDOCUMENTDATE = MyBase.Columns("DOCUMENTDATE")
            Me.columnDOCUMENTNUMBER = MyBase.Columns("DOCUMENTNUMBER")
            Me.columnLEDGERNAME = MyBase.Columns("LEDGERNAME")
            Me.columnGENERALJOURNALACCOUNTENTRYRECID = MyBase.Columns("GENERALJOURNALACCOUNTENTRYRECID")
            Me.columnACCOUNTDISPLAYVALUE = MyBase.Columns("ACCOUNTDISPLAYVALUE")
            Me.columnPARTITION = MyBase.Columns("PARTITION")
            Me.columnCUSTACCOUNT = MyBase.Columns("CUSTACCOUNT")
            Me.columnCUSTINVOICE = MyBase.Columns("CUSTINVOICE")
            Me.columnVENDACCOUNT = MyBase.Columns("VENDACCOUNT")
            Me.columnVENDINVOICE = MyBase.Columns("VENDINVOICE")
            Me.columnCUSTSETTLEINVOICE = MyBase.Columns("CUSTSETTLEINVOICE")
            Me.columnVENDSETTLEINVOICE = MyBase.Columns("VENDSETTLEINVOICE")
            Me.columnDATAAREAID = MyBase.Columns("DATAAREAID")
            Me.columnSYNCSTARTDATETIME = MyBase.Columns("SYNCSTARTDATETIME")
            Me.columnRECID = MyBase.Columns("RECID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEFINITIONGROUP = New Global.System.Data.DataColumn("DEFINITIONGROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEFINITIONGROUP)
            Me.columnEXECUTIONID = New Global.System.Data.DataColumn("EXECUTIONID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXECUTIONID)
            Me.columnISSELECTED = New Global.System.Data.DataColumn("ISSELECTED", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSELECTED)
            Me.columnTRANSFERSTATUS = New Global.System.Data.DataColumn("TRANSFERSTATUS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSFERSTATUS)
            Me.columnJOURNALNUMBER = New Global.System.Data.DataColumn("JOURNALNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOURNALNUMBER)
            Me.columnVOUCHER = New Global.System.Data.DataColumn("VOUCHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOUCHER)
            Me.columnACCOUNTINGDATE = New Global.System.Data.DataColumn("ACCOUNTINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTINGDATE)
            Me.columnPOSTINGLAYER = New Global.System.Data.DataColumn("POSTINGLAYER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTINGLAYER)
            Me.columnLEDGERACCOUNT = New Global.System.Data.DataColumn("LEDGERACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEDGERACCOUNT)
            Me.columnTRANSACTIONCURRENCYCODE = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYCODE)
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYCREDITAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYCREDITAMOUNT)
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYDEBITAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYDEBITAMOUNT)
            Me.columnTRANSACTIONCURRENCYAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYAMOUNT)
            Me.columnACCOUNTINGCURRENCYAMOUNT = New Global.System.Data.DataColumn("ACCOUNTINGCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTINGCURRENCYAMOUNT)
            Me.columnREPORTINGCURRENCYAMOUNT = New Global.System.Data.DataColumn("REPORTINGCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPORTINGCURRENCYAMOUNT)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnQUANTITY = New Global.System.Data.DataColumn("QUANTITY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY)
            Me.columnPOSTINGTYPE = New Global.System.Data.DataColumn("POSTINGTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTINGTYPE)
            Me.columnJOURNALCATEGORY = New Global.System.Data.DataColumn("JOURNALCATEGORY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOURNALCATEGORY)
            Me.columnISCORRECTION = New Global.System.Data.DataColumn("ISCORRECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISCORRECTION)
            Me.columnISCREDIT = New Global.System.Data.DataColumn("ISCREDIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISCREDIT)
            Me.columnACKNOWLEDGEMENTDATE = New Global.System.Data.DataColumn("ACKNOWLEDGEMENTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACKNOWLEDGEMENTDATE)
            Me.columnDOCUMENTDATE = New Global.System.Data.DataColumn("DOCUMENTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTDATE)
            Me.columnDOCUMENTNUMBER = New Global.System.Data.DataColumn("DOCUMENTNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTNUMBER)
            Me.columnLEDGERNAME = New Global.System.Data.DataColumn("LEDGERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEDGERNAME)
            Me.columnGENERALJOURNALACCOUNTENTRYRECID = New Global.System.Data.DataColumn("GENERALJOURNALACCOUNTENTRYRECID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENERALJOURNALACCOUNTENTRYRECID)
            Me.columnACCOUNTDISPLAYVALUE = New Global.System.Data.DataColumn("ACCOUNTDISPLAYVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTDISPLAYVALUE)
            Me.columnPARTITION = New Global.System.Data.DataColumn("PARTITION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARTITION)
            Me.columnCUSTACCOUNT = New Global.System.Data.DataColumn("CUSTACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTACCOUNT)
            Me.columnCUSTINVOICE = New Global.System.Data.DataColumn("CUSTINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTINVOICE)
            Me.columnVENDACCOUNT = New Global.System.Data.DataColumn("VENDACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDACCOUNT)
            Me.columnVENDINVOICE = New Global.System.Data.DataColumn("VENDINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDINVOICE)
            Me.columnCUSTSETTLEINVOICE = New Global.System.Data.DataColumn("CUSTSETTLEINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTSETTLEINVOICE)
            Me.columnVENDSETTLEINVOICE = New Global.System.Data.DataColumn("VENDSETTLEINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDSETTLEINVOICE)
            Me.columnDATAAREAID = New Global.System.Data.DataColumn("DATAAREAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATAAREAID)
            Me.columnSYNCSTARTDATETIME = New Global.System.Data.DataColumn("SYNCSTARTDATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYNCSTARTDATETIME)
            Me.columnRECID = New Global.System.Data.DataColumn("RECID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECID)
            Me.columnDEFINITIONGROUP.AllowDBNull = false
            Me.columnDEFINITIONGROUP.MaxLength = 60
            Me.columnEXECUTIONID.AllowDBNull = false
            Me.columnEXECUTIONID.MaxLength = 90
            Me.columnISSELECTED.AllowDBNull = false
            Me.columnTRANSFERSTATUS.AllowDBNull = false
            Me.columnJOURNALNUMBER.AllowDBNull = false
            Me.columnJOURNALNUMBER.MaxLength = 20
            Me.columnVOUCHER.AllowDBNull = false
            Me.columnVOUCHER.MaxLength = 20
            Me.columnACCOUNTINGDATE.AllowDBNull = false
            Me.columnPOSTINGLAYER.AllowDBNull = false
            Me.columnLEDGERACCOUNT.AllowDBNull = false
            Me.columnLEDGERACCOUNT.MaxLength = 500
            Me.columnTRANSACTIONCURRENCYCODE.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYCODE.MaxLength = 3
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYAMOUNT.AllowDBNull = false
            Me.columnACCOUNTINGCURRENCYAMOUNT.AllowDBNull = false
            Me.columnREPORTINGCURRENCYAMOUNT.AllowDBNull = false
            Me.columnDESCRIPTION.AllowDBNull = false
            Me.columnDESCRIPTION.MaxLength = 512
            Me.columnQUANTITY.AllowDBNull = false
            Me.columnPOSTINGTYPE.AllowDBNull = false
            Me.columnJOURNALCATEGORY.AllowDBNull = false
            Me.columnISCORRECTION.AllowDBNull = false
            Me.columnISCREDIT.AllowDBNull = false
            Me.columnACKNOWLEDGEMENTDATE.AllowDBNull = false
            Me.columnDOCUMENTDATE.AllowDBNull = false
            Me.columnDOCUMENTNUMBER.AllowDBNull = false
            Me.columnDOCUMENTNUMBER.MaxLength = 20
            Me.columnLEDGERNAME.AllowDBNull = false
            Me.columnLEDGERNAME.MaxLength = 20
            Me.columnGENERALJOURNALACCOUNTENTRYRECID.AllowDBNull = false
            Me.columnACCOUNTDISPLAYVALUE.AllowDBNull = false
            Me.columnACCOUNTDISPLAYVALUE.MaxLength = 500
            Me.columnPARTITION.AllowDBNull = false
            Me.columnPARTITION.MaxLength = 20
            Me.columnCUSTACCOUNT.AllowDBNull = false
            Me.columnCUSTACCOUNT.MaxLength = 20
            Me.columnCUSTINVOICE.AllowDBNull = false
            Me.columnCUSTINVOICE.MaxLength = 20
            Me.columnVENDACCOUNT.AllowDBNull = false
            Me.columnVENDACCOUNT.MaxLength = 20
            Me.columnVENDINVOICE.AllowDBNull = false
            Me.columnVENDINVOICE.MaxLength = 20
            Me.columnCUSTSETTLEINVOICE.AllowDBNull = false
            Me.columnCUSTSETTLEINVOICE.MaxLength = 20
            Me.columnVENDSETTLEINVOICE.AllowDBNull = false
            Me.columnVENDSETTLEINVOICE.MaxLength = 20
            Me.columnDATAAREAID.AllowDBNull = false
            Me.columnDATAAREAID.MaxLength = 4
            Me.columnSYNCSTARTDATETIME.AllowDBNull = false
            Me.columnRECID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewGeneralJournalAccountEntryStagingRow() As GeneralJournalAccountEntryStagingRow
            Return CType(Me.NewRow,GeneralJournalAccountEntryStagingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GeneralJournalAccountEntryStagingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GeneralJournalAccountEntryStagingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GeneralJournalAccountEntryStagingRowChangedEvent) Is Nothing) Then
                RaiseEvent GeneralJournalAccountEntryStagingRowChanged(Me, New GeneralJournalAccountEntryStagingRowChangeEvent(CType(e.Row,GeneralJournalAccountEntryStagingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GeneralJournalAccountEntryStagingRowChangingEvent) Is Nothing) Then
                RaiseEvent GeneralJournalAccountEntryStagingRowChanging(Me, New GeneralJournalAccountEntryStagingRowChangeEvent(CType(e.Row,GeneralJournalAccountEntryStagingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GeneralJournalAccountEntryStagingRowDeletedEvent) Is Nothing) Then
                RaiseEvent GeneralJournalAccountEntryStagingRowDeleted(Me, New GeneralJournalAccountEntryStagingRowChangeEvent(CType(e.Row,GeneralJournalAccountEntryStagingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GeneralJournalAccountEntryStagingRowDeletingEvent) Is Nothing) Then
                RaiseEvent GeneralJournalAccountEntryStagingRowDeleting(Me, New GeneralJournalAccountEntryStagingRowChangeEvent(CType(e.Row,GeneralJournalAccountEntryStagingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveGeneralJournalAccountEntryStagingRow(ByVal row As GeneralJournalAccountEntryStagingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSQLDataLake = New dsSQLDataLake()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GeneralJournalAccountEntryStagingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_GeneralJournalEntryDiffDataTable
        Inherits Global.System.Data.TypedTableBase(Of VW_GeneralJournalEntryDiffRow)
        
        Private columnJOURNALNUMBER As Global.System.Data.DataColumn
        
        Private columnVOUCHER As Global.System.Data.DataColumn
        
        Private columnACCOUNTINGDATE As Global.System.Data.DataColumn
        
        Private columnPOSTINGLAYER As Global.System.Data.DataColumn
        
        Private columnLEDGERACCOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYCODE As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYCREDITAMOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYDEBITAMOUNT As Global.System.Data.DataColumn
        
        Private columnTRANSACTIONCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnACCOUNTINGCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnREPORTINGCURRENCYAMOUNT As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnQUANTITY As Global.System.Data.DataColumn
        
        Private columnPOSTINGTYPE As Global.System.Data.DataColumn
        
        Private columnJOURNALCATEGORY As Global.System.Data.DataColumn
        
        Private columnISCORRECTION As Global.System.Data.DataColumn
        
        Private columnISCREDIT As Global.System.Data.DataColumn
        
        Private columnACKNOWLEDGEMENTDATE As Global.System.Data.DataColumn
        
        Private columnDOCUMENTDATE As Global.System.Data.DataColumn
        
        Private columnDOCUMENTNUMBER As Global.System.Data.DataColumn
        
        Private columnLEDGERNAME As Global.System.Data.DataColumn
        
        Private columnGENERALJOURNALACCOUNTENTRYRECID As Global.System.Data.DataColumn
        
        Private columnACCOUNTDISPLAYVALUE As Global.System.Data.DataColumn
        
        Private columnCUSTACCOUNT As Global.System.Data.DataColumn
        
        Private columnCUSTINVOICE As Global.System.Data.DataColumn
        
        Private columnVENDACCOUNT As Global.System.Data.DataColumn
        
        Private columnVENDINVOICE As Global.System.Data.DataColumn
        
        Private columnCUSTSETTLEINVOICE As Global.System.Data.DataColumn
        
        Private columnVENDSETTLEINVOICE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_GeneralJournalEntryDiff"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property JOURNALNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOURNALNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VOUCHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOUCHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POSTINGLAYERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTINGLAYER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LEDGERACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEDGERACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYCREDITAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYCREDITAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYDEBITAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYDEBITAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSACTIONCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTIONCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTINGCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTINGCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property REPORTINGCURRENCYAMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPORTINGCURRENCYAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POSTINGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTINGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property JOURNALCATEGORYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOURNALCATEGORY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISCORRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISCORRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISCREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISCREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACKNOWLEDGEMENTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACKNOWLEDGEMENTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOCUMENTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOCUMENTNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LEDGERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEDGERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GENERALJOURNALACCOUNTENTRYRECIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENERALJOURNALACCOUNTENTRYRECID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCOUNTDISPLAYVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNTDISPLAYVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDACCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDACCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CUSTSETTLEINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTSETTLEINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VENDSETTLEINVOICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDSETTLEINVOICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_GeneralJournalEntryDiffRow
            Get
                Return CType(Me.Rows(index),VW_GeneralJournalEntryDiffRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event VW_GeneralJournalEntryDiffRowChanging As VW_GeneralJournalEntryDiffRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event VW_GeneralJournalEntryDiffRowChanged As VW_GeneralJournalEntryDiffRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event VW_GeneralJournalEntryDiffRowDeleting As VW_GeneralJournalEntryDiffRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event VW_GeneralJournalEntryDiffRowDeleted As VW_GeneralJournalEntryDiffRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddVW_GeneralJournalEntryDiffRow(ByVal row As VW_GeneralJournalEntryDiffRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddVW_GeneralJournalEntryDiffRow( _
                    ByVal JOURNALNUMBER As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal ACCOUNTINGDATE As Date,  _
                    ByVal POSTINGLAYER As Integer,  _
                    ByVal LEDGERACCOUNT As String,  _
                    ByVal TRANSACTIONCURRENCYCODE As String,  _
                    ByVal TRANSACTIONCURRENCYCREDITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYDEBITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYAMOUNT As Decimal,  _
                    ByVal ACCOUNTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal REPORTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal QUANTITY As Decimal,  _
                    ByVal POSTINGTYPE As Integer,  _
                    ByVal JOURNALCATEGORY As Integer,  _
                    ByVal ISCORRECTION As Integer,  _
                    ByVal ISCREDIT As Integer,  _
                    ByVal ACKNOWLEDGEMENTDATE As Date,  _
                    ByVal DOCUMENTDATE As Date,  _
                    ByVal DOCUMENTNUMBER As String,  _
                    ByVal LEDGERNAME As String,  _
                    ByVal GENERALJOURNALACCOUNTENTRYRECID As Long,  _
                    ByVal ACCOUNTDISPLAYVALUE As String,  _
                    ByVal CUSTACCOUNT As String,  _
                    ByVal CUSTINVOICE As String,  _
                    ByVal VENDACCOUNT As String,  _
                    ByVal VENDINVOICE As String,  _
                    ByVal CUSTSETTLEINVOICE As String,  _
                    ByVal VENDSETTLEINVOICE As String) As VW_GeneralJournalEntryDiffRow
            Dim rowVW_GeneralJournalEntryDiffRow As VW_GeneralJournalEntryDiffRow = CType(Me.NewRow,VW_GeneralJournalEntryDiffRow)
            Dim columnValuesArray() As Object = New Object() {JOURNALNUMBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYCODE, TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURRENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGCURRENCYAMOUNT, DESCRIPTION, QUANTITY, POSTINGTYPE, JOURNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUMENTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINVOICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE}
            rowVW_GeneralJournalEntryDiffRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_GeneralJournalEntryDiffRow)
            Return rowVW_GeneralJournalEntryDiffRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_GeneralJournalEntryDiffDataTable = CType(MyBase.Clone,VW_GeneralJournalEntryDiffDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_GeneralJournalEntryDiffDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnJOURNALNUMBER = MyBase.Columns("JOURNALNUMBER")
            Me.columnVOUCHER = MyBase.Columns("VOUCHER")
            Me.columnACCOUNTINGDATE = MyBase.Columns("ACCOUNTINGDATE")
            Me.columnPOSTINGLAYER = MyBase.Columns("POSTINGLAYER")
            Me.columnLEDGERACCOUNT = MyBase.Columns("LEDGERACCOUNT")
            Me.columnTRANSACTIONCURRENCYCODE = MyBase.Columns("TRANSACTIONCURRENCYCODE")
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYCREDITAMOUNT")
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYDEBITAMOUNT")
            Me.columnTRANSACTIONCURRENCYAMOUNT = MyBase.Columns("TRANSACTIONCURRENCYAMOUNT")
            Me.columnACCOUNTINGCURRENCYAMOUNT = MyBase.Columns("ACCOUNTINGCURRENCYAMOUNT")
            Me.columnREPORTINGCURRENCYAMOUNT = MyBase.Columns("REPORTINGCURRENCYAMOUNT")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnQUANTITY = MyBase.Columns("QUANTITY")
            Me.columnPOSTINGTYPE = MyBase.Columns("POSTINGTYPE")
            Me.columnJOURNALCATEGORY = MyBase.Columns("JOURNALCATEGORY")
            Me.columnISCORRECTION = MyBase.Columns("ISCORRECTION")
            Me.columnISCREDIT = MyBase.Columns("ISCREDIT")
            Me.columnACKNOWLEDGEMENTDATE = MyBase.Columns("ACKNOWLEDGEMENTDATE")
            Me.columnDOCUMENTDATE = MyBase.Columns("DOCUMENTDATE")
            Me.columnDOCUMENTNUMBER = MyBase.Columns("DOCUMENTNUMBER")
            Me.columnLEDGERNAME = MyBase.Columns("LEDGERNAME")
            Me.columnGENERALJOURNALACCOUNTENTRYRECID = MyBase.Columns("GENERALJOURNALACCOUNTENTRYRECID")
            Me.columnACCOUNTDISPLAYVALUE = MyBase.Columns("ACCOUNTDISPLAYVALUE")
            Me.columnCUSTACCOUNT = MyBase.Columns("CUSTACCOUNT")
            Me.columnCUSTINVOICE = MyBase.Columns("CUSTINVOICE")
            Me.columnVENDACCOUNT = MyBase.Columns("VENDACCOUNT")
            Me.columnVENDINVOICE = MyBase.Columns("VENDINVOICE")
            Me.columnCUSTSETTLEINVOICE = MyBase.Columns("CUSTSETTLEINVOICE")
            Me.columnVENDSETTLEINVOICE = MyBase.Columns("VENDSETTLEINVOICE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnJOURNALNUMBER = New Global.System.Data.DataColumn("JOURNALNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOURNALNUMBER)
            Me.columnVOUCHER = New Global.System.Data.DataColumn("VOUCHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOUCHER)
            Me.columnACCOUNTINGDATE = New Global.System.Data.DataColumn("ACCOUNTINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTINGDATE)
            Me.columnPOSTINGLAYER = New Global.System.Data.DataColumn("POSTINGLAYER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTINGLAYER)
            Me.columnLEDGERACCOUNT = New Global.System.Data.DataColumn("LEDGERACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEDGERACCOUNT)
            Me.columnTRANSACTIONCURRENCYCODE = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYCODE)
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYCREDITAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYCREDITAMOUNT)
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYDEBITAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYDEBITAMOUNT)
            Me.columnTRANSACTIONCURRENCYAMOUNT = New Global.System.Data.DataColumn("TRANSACTIONCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTIONCURRENCYAMOUNT)
            Me.columnACCOUNTINGCURRENCYAMOUNT = New Global.System.Data.DataColumn("ACCOUNTINGCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTINGCURRENCYAMOUNT)
            Me.columnREPORTINGCURRENCYAMOUNT = New Global.System.Data.DataColumn("REPORTINGCURRENCYAMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPORTINGCURRENCYAMOUNT)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnQUANTITY = New Global.System.Data.DataColumn("QUANTITY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY)
            Me.columnPOSTINGTYPE = New Global.System.Data.DataColumn("POSTINGTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTINGTYPE)
            Me.columnJOURNALCATEGORY = New Global.System.Data.DataColumn("JOURNALCATEGORY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOURNALCATEGORY)
            Me.columnISCORRECTION = New Global.System.Data.DataColumn("ISCORRECTION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISCORRECTION)
            Me.columnISCREDIT = New Global.System.Data.DataColumn("ISCREDIT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISCREDIT)
            Me.columnACKNOWLEDGEMENTDATE = New Global.System.Data.DataColumn("ACKNOWLEDGEMENTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACKNOWLEDGEMENTDATE)
            Me.columnDOCUMENTDATE = New Global.System.Data.DataColumn("DOCUMENTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTDATE)
            Me.columnDOCUMENTNUMBER = New Global.System.Data.DataColumn("DOCUMENTNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTNUMBER)
            Me.columnLEDGERNAME = New Global.System.Data.DataColumn("LEDGERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEDGERNAME)
            Me.columnGENERALJOURNALACCOUNTENTRYRECID = New Global.System.Data.DataColumn("GENERALJOURNALACCOUNTENTRYRECID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENERALJOURNALACCOUNTENTRYRECID)
            Me.columnACCOUNTDISPLAYVALUE = New Global.System.Data.DataColumn("ACCOUNTDISPLAYVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNTDISPLAYVALUE)
            Me.columnCUSTACCOUNT = New Global.System.Data.DataColumn("CUSTACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTACCOUNT)
            Me.columnCUSTINVOICE = New Global.System.Data.DataColumn("CUSTINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTINVOICE)
            Me.columnVENDACCOUNT = New Global.System.Data.DataColumn("VENDACCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDACCOUNT)
            Me.columnVENDINVOICE = New Global.System.Data.DataColumn("VENDINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDINVOICE)
            Me.columnCUSTSETTLEINVOICE = New Global.System.Data.DataColumn("CUSTSETTLEINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTSETTLEINVOICE)
            Me.columnVENDSETTLEINVOICE = New Global.System.Data.DataColumn("VENDSETTLEINVOICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDSETTLEINVOICE)
            Me.columnJOURNALNUMBER.AllowDBNull = false
            Me.columnJOURNALNUMBER.MaxLength = 20
            Me.columnVOUCHER.AllowDBNull = false
            Me.columnVOUCHER.MaxLength = 20
            Me.columnACCOUNTINGDATE.AllowDBNull = false
            Me.columnPOSTINGLAYER.AllowDBNull = false
            Me.columnLEDGERACCOUNT.AllowDBNull = false
            Me.columnLEDGERACCOUNT.MaxLength = 500
            Me.columnTRANSACTIONCURRENCYCODE.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYCODE.MaxLength = 3
            Me.columnTRANSACTIONCURRENCYCREDITAMOUNT.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYDEBITAMOUNT.AllowDBNull = false
            Me.columnTRANSACTIONCURRENCYAMOUNT.AllowDBNull = false
            Me.columnACCOUNTINGCURRENCYAMOUNT.AllowDBNull = false
            Me.columnREPORTINGCURRENCYAMOUNT.AllowDBNull = false
            Me.columnDESCRIPTION.AllowDBNull = false
            Me.columnDESCRIPTION.MaxLength = 512
            Me.columnQUANTITY.AllowDBNull = false
            Me.columnPOSTINGTYPE.AllowDBNull = false
            Me.columnJOURNALCATEGORY.AllowDBNull = false
            Me.columnISCORRECTION.AllowDBNull = false
            Me.columnISCREDIT.AllowDBNull = false
            Me.columnACKNOWLEDGEMENTDATE.AllowDBNull = false
            Me.columnDOCUMENTDATE.AllowDBNull = false
            Me.columnDOCUMENTNUMBER.AllowDBNull = false
            Me.columnDOCUMENTNUMBER.MaxLength = 20
            Me.columnLEDGERNAME.AllowDBNull = false
            Me.columnLEDGERNAME.MaxLength = 20
            Me.columnGENERALJOURNALACCOUNTENTRYRECID.AllowDBNull = false
            Me.columnACCOUNTDISPLAYVALUE.AllowDBNull = false
            Me.columnACCOUNTDISPLAYVALUE.MaxLength = 500
            Me.columnCUSTACCOUNT.AllowDBNull = false
            Me.columnCUSTACCOUNT.MaxLength = 20
            Me.columnCUSTINVOICE.AllowDBNull = false
            Me.columnCUSTINVOICE.MaxLength = 20
            Me.columnVENDACCOUNT.AllowDBNull = false
            Me.columnVENDACCOUNT.MaxLength = 20
            Me.columnVENDINVOICE.AllowDBNull = false
            Me.columnVENDINVOICE.MaxLength = 20
            Me.columnCUSTSETTLEINVOICE.AllowDBNull = false
            Me.columnCUSTSETTLEINVOICE.MaxLength = 20
            Me.columnVENDSETTLEINVOICE.AllowDBNull = false
            Me.columnVENDSETTLEINVOICE.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewVW_GeneralJournalEntryDiffRow() As VW_GeneralJournalEntryDiffRow
            Return CType(Me.NewRow,VW_GeneralJournalEntryDiffRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_GeneralJournalEntryDiffRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_GeneralJournalEntryDiffRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_GeneralJournalEntryDiffRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_GeneralJournalEntryDiffRowChanged(Me, New VW_GeneralJournalEntryDiffRowChangeEvent(CType(e.Row,VW_GeneralJournalEntryDiffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_GeneralJournalEntryDiffRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_GeneralJournalEntryDiffRowChanging(Me, New VW_GeneralJournalEntryDiffRowChangeEvent(CType(e.Row,VW_GeneralJournalEntryDiffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_GeneralJournalEntryDiffRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_GeneralJournalEntryDiffRowDeleted(Me, New VW_GeneralJournalEntryDiffRowChangeEvent(CType(e.Row,VW_GeneralJournalEntryDiffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_GeneralJournalEntryDiffRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_GeneralJournalEntryDiffRowDeleting(Me, New VW_GeneralJournalEntryDiffRowChangeEvent(CType(e.Row,VW_GeneralJournalEntryDiffRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveVW_GeneralJournalEntryDiffRow(ByVal row As VW_GeneralJournalEntryDiffRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsSQLDataLake = New dsSQLDataLake()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_GeneralJournalEntryDiffDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class GeneralJournalAccountEntryStagingRow
        Inherits Global.System.Data.DataRow
        
        Private tableGeneralJournalAccountEntryStaging As GeneralJournalAccountEntryStagingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGeneralJournalAccountEntryStaging = CType(Me.Table,GeneralJournalAccountEntryStagingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEFINITIONGROUP() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.DEFINITIONGROUPColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.DEFINITIONGROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EXECUTIONID() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.EXECUTIONIDColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.EXECUTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISSELECTED() As Integer
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ISSELECTEDColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ISSELECTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSFERSTATUS() As Integer
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.TRANSFERSTATUSColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.TRANSFERSTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property JOURNALNUMBER() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.JOURNALNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.JOURNALNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VOUCHER() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.VOUCHERColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.VOUCHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTINGDATE() As Date
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTINGDATEColumn),Date)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POSTINGLAYER() As Integer
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.POSTINGLAYERColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.POSTINGLAYERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LEDGERACCOUNT() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.LEDGERACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.LEDGERACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYCODE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYCODEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYCREDITAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYCREDITAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYCREDITAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYDEBITAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYDEBITAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYDEBITAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.TRANSACTIONCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTINGCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTINGCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTINGCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property REPORTINGCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.REPORTINGCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.REPORTINGCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DESCRIPTION() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.DESCRIPTIONColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUANTITY() As Decimal
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.QUANTITYColumn),Decimal)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POSTINGTYPE() As Integer
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.POSTINGTYPEColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.POSTINGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property JOURNALCATEGORY() As Integer
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.JOURNALCATEGORYColumn),Integer)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.JOURNALCATEGORYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISCORRECTION() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ISCORRECTIONColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ISCORRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISCREDIT() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ISCREDITColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ISCREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACKNOWLEDGEMENTDATE() As Date
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ACKNOWLEDGEMENTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ACKNOWLEDGEMENTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOCUMENTDATE() As Date
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.DOCUMENTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.DOCUMENTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOCUMENTNUMBER() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.DOCUMENTNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.DOCUMENTNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LEDGERNAME() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.LEDGERNAMEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.LEDGERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GENERALJOURNALACCOUNTENTRYRECID() As Long
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.GENERALJOURNALACCOUNTENTRYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.GENERALJOURNALACCOUNTENTRYRECIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTDISPLAYVALUE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTDISPLAYVALUEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.ACCOUNTDISPLAYVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PARTITION() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.PARTITIONColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.PARTITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTACCOUNT() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.CUSTACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.CUSTACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTINVOICE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.CUSTINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.CUSTINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDACCOUNT() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.VENDACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.VENDACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDINVOICE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.VENDINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.VENDINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTSETTLEINVOICE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.CUSTSETTLEINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.CUSTSETTLEINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDSETTLEINVOICE() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.VENDSETTLEINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.VENDSETTLEINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATAAREAID() As String
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.DATAAREAIDColumn),String)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.DATAAREAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SYNCSTARTDATETIME() As Date
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.SYNCSTARTDATETIMEColumn),Date)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.SYNCSTARTDATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RECID() As Long
            Get
                Return CType(Me(Me.tableGeneralJournalAccountEntryStaging.RECIDColumn),Long)
            End Get
            Set
                Me(Me.tableGeneralJournalAccountEntryStaging.RECIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VW_GeneralJournalEntryDiffRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_GeneralJournalEntryDiff As VW_GeneralJournalEntryDiffDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_GeneralJournalEntryDiff = CType(Me.Table,VW_GeneralJournalEntryDiffDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property JOURNALNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.JOURNALNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.JOURNALNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VOUCHER() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.VOUCHERColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.VOUCHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTINGDATE() As Date
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTINGDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POSTINGLAYER() As Integer
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.POSTINGLAYERColumn),Integer)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.POSTINGLAYERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LEDGERACCOUNT() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.LEDGERACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.LEDGERACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYCODE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYCREDITAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYCREDITAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYCREDITAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYDEBITAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYDEBITAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYDEBITAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSACTIONCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.TRANSACTIONCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTINGCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTINGCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTINGCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property REPORTINGCURRENCYAMOUNT() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.REPORTINGCURRENCYAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.REPORTINGCURRENCYAMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DESCRIPTION() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.DESCRIPTIONColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUANTITY() As Decimal
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.QUANTITYColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POSTINGTYPE() As Integer
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.POSTINGTYPEColumn),Integer)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.POSTINGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property JOURNALCATEGORY() As Integer
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.JOURNALCATEGORYColumn),Integer)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.JOURNALCATEGORYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISCORRECTION() As Integer
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ISCORRECTIONColumn),Integer)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ISCORRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISCREDIT() As Integer
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ISCREDITColumn),Integer)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ISCREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACKNOWLEDGEMENTDATE() As Date
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ACKNOWLEDGEMENTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ACKNOWLEDGEMENTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOCUMENTDATE() As Date
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.DOCUMENTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.DOCUMENTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOCUMENTNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.DOCUMENTNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.DOCUMENTNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LEDGERNAME() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.LEDGERNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.LEDGERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GENERALJOURNALACCOUNTENTRYRECID() As Long
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.GENERALJOURNALACCOUNTENTRYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.GENERALJOURNALACCOUNTENTRYRECIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCOUNTDISPLAYVALUE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTDISPLAYVALUEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.ACCOUNTDISPLAYVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTACCOUNT() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.CUSTACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.CUSTACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTINVOICE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.CUSTINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.CUSTINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDACCOUNT() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.VENDACCOUNTColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.VENDACCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDINVOICE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.VENDINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.VENDINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CUSTSETTLEINVOICE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.CUSTSETTLEINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.CUSTSETTLEINVOICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VENDSETTLEINVOICE() As String
            Get
                Return CType(Me(Me.tableVW_GeneralJournalEntryDiff.VENDSETTLEINVOICEColumn),String)
            End Get
            Set
                Me(Me.tableVW_GeneralJournalEntryDiff.VENDSETTLEINVOICEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class GeneralJournalAccountEntryStagingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GeneralJournalAccountEntryStagingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As GeneralJournalAccountEntryStagingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As GeneralJournalAccountEntryStagingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class VW_GeneralJournalEntryDiffRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_GeneralJournalEntryDiffRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As VW_GeneralJournalEntryDiffRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As VW_GeneralJournalEntryDiffRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsSQLDataLakeTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GeneralJournalAccountEntryStagingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GeneralJournalAccountEntryStaging"
            tableMapping.ColumnMappings.Add("DEFINITIONGROUP", "DEFINITIONGROUP")
            tableMapping.ColumnMappings.Add("EXECUTIONID", "EXECUTIONID")
            tableMapping.ColumnMappings.Add("ISSELECTED", "ISSELECTED")
            tableMapping.ColumnMappings.Add("TRANSFERSTATUS", "TRANSFERSTATUS")
            tableMapping.ColumnMappings.Add("JOURNALNUMBER", "JOURNALNUMBER")
            tableMapping.ColumnMappings.Add("VOUCHER", "VOUCHER")
            tableMapping.ColumnMappings.Add("ACCOUNTINGDATE", "ACCOUNTINGDATE")
            tableMapping.ColumnMappings.Add("POSTINGLAYER", "POSTINGLAYER")
            tableMapping.ColumnMappings.Add("LEDGERACCOUNT", "LEDGERACCOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYCODE", "TRANSACTIONCURRENCYCODE")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYCREDITAMOUNT", "TRANSACTIONCURRENCYCREDITAMOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYDEBITAMOUNT", "TRANSACTIONCURRENCYDEBITAMOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYAMOUNT", "TRANSACTIONCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("ACCOUNTINGCURRENCYAMOUNT", "ACCOUNTINGCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("REPORTINGCURRENCYAMOUNT", "REPORTINGCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY")
            tableMapping.ColumnMappings.Add("POSTINGTYPE", "POSTINGTYPE")
            tableMapping.ColumnMappings.Add("JOURNALCATEGORY", "JOURNALCATEGORY")
            tableMapping.ColumnMappings.Add("ISCORRECTION", "ISCORRECTION")
            tableMapping.ColumnMappings.Add("ISCREDIT", "ISCREDIT")
            tableMapping.ColumnMappings.Add("ACKNOWLEDGEMENTDATE", "ACKNOWLEDGEMENTDATE")
            tableMapping.ColumnMappings.Add("DOCUMENTDATE", "DOCUMENTDATE")
            tableMapping.ColumnMappings.Add("DOCUMENTNUMBER", "DOCUMENTNUMBER")
            tableMapping.ColumnMappings.Add("LEDGERNAME", "LEDGERNAME")
            tableMapping.ColumnMappings.Add("GENERALJOURNALACCOUNTENTRYRECID", "GENERALJOURNALACCOUNTENTRYRECID")
            tableMapping.ColumnMappings.Add("ACCOUNTDISPLAYVALUE", "ACCOUNTDISPLAYVALUE")
            tableMapping.ColumnMappings.Add("PARTITION", "PARTITION")
            tableMapping.ColumnMappings.Add("CUSTACCOUNT", "CUSTACCOUNT")
            tableMapping.ColumnMappings.Add("CUSTINVOICE", "CUSTINVOICE")
            tableMapping.ColumnMappings.Add("VENDACCOUNT", "VENDACCOUNT")
            tableMapping.ColumnMappings.Add("VENDINVOICE", "VENDINVOICE")
            tableMapping.ColumnMappings.Add("CUSTSETTLEINVOICE", "CUSTSETTLEINVOICE")
            tableMapping.ColumnMappings.Add("VENDSETTLEINVOICE", "VENDSETTLEINVOICE")
            tableMapping.ColumnMappings.Add("DATAAREAID", "DATAAREAID")
            tableMapping.ColumnMappings.Add("SYNCSTARTDATETIME", "SYNCSTARTDATETIME")
            tableMapping.ColumnMappings.Add("RECID", "RECID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GeneralJournalAccountEntryStaging] ([DEFINITIONGROUP], [EXECUT"& _ 
                "IONID], [ISSELECTED], [TRANSFERSTATUS], [JOURNALNUMBER], [VOUCHER], [ACCOUNTINGD"& _ 
                "ATE], [POSTINGLAYER], [LEDGERACCOUNT], [TRANSACTIONCURRENCYCODE], [TRANSACTIONCU"& _ 
                "RRENCYCREDITAMOUNT], [TRANSACTIONCURRENCYDEBITAMOUNT], [TRANSACTIONCURRENCYAMOUN"& _ 
                "T], [ACCOUNTINGCURRENCYAMOUNT], [REPORTINGCURRENCYAMOUNT], [DESCRIPTION], [QUANT"& _ 
                "ITY], [POSTINGTYPE], [JOURNALCATEGORY], [ISCORRECTION], [ISCREDIT], [ACKNOWLEDGE"& _ 
                "MENTDATE], [DOCUMENTDATE], [DOCUMENTNUMBER], [LEDGERNAME], [GENERALJOURNALACCOUN"& _ 
                "TENTRYRECID], [ACCOUNTDISPLAYVALUE], [PARTITION], [CUSTACCOUNT], [CUSTINVOICE], "& _ 
                "[VENDACCOUNT], [VENDINVOICE], [CUSTSETTLEINVOICE], [VENDSETTLEINVOICE], [DATAARE"& _ 
                "AID], [SYNCSTARTDATETIME], [RECID]) VALUES (@DEFINITIONGROUP, @EXECUTIONID, @ISS"& _ 
                "ELECTED, @TRANSFERSTATUS, @JOURNALNUMBER, @VOUCHER, @ACCOUNTINGDATE, @POSTINGLAY"& _ 
                "ER, @LEDGERACCOUNT, @TRANSACTIONCURRENCYCODE, @TRANSACTIONCURRENCYCREDITAMOUNT, "& _ 
                "@TRANSACTIONCURRENCYDEBITAMOUNT, @TRANSACTIONCURRENCYAMOUNT, @ACCOUNTINGCURRENCY"& _ 
                "AMOUNT, @REPORTINGCURRENCYAMOUNT, @DESCRIPTION, @QUANTITY, @POSTINGTYPE, @JOURNA"& _ 
                "LCATEGORY, @ISCORRECTION, @ISCREDIT, @ACKNOWLEDGEMENTDATE, @DOCUMENTDATE, @DOCUM"& _ 
                "ENTNUMBER, @LEDGERNAME, @GENERALJOURNALACCOUNTENTRYRECID, @ACCOUNTDISPLAYVALUE, "& _ 
                "@PARTITION, @CUSTACCOUNT, @CUSTINVOICE, @VENDACCOUNT, @VENDINVOICE, @CUSTSETTLEI"& _ 
                "NVOICE, @VENDSETTLEINVOICE, @DATAAREAID, @SYNCSTARTDATETIME, @RECID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEFINITIONGROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEFINITIONGROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXECUTIONID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXECUTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISSELECTED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSELECTED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSFERSTATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSFERSTATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JOURNALNUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOURNALNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOUCHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOUCHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCOUNTINGDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCOUNTINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSTINGLAYER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSTINGLAYER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LEDGERACCOUNT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LEDGERACCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSACTIONCURRENCYCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSACTIONCURRENCYCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSACTIONCURRENCYCREDITAMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "TRANSACTIONCURRENCYCREDITAMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSACTIONCURRENCYDEBITAMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "TRANSACTIONCURRENCYDEBITAMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSACTIONCURRENCYAMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "TRANSACTIONCURRENCYAMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCOUNTINGCURRENCYAMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "ACCOUNTINGCURRENCYAMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPORTINGCURRENCYAMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "REPORTINGCURRENCYAMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUANTITY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 32, 6, "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSTINGTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSTINGTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JOURNALCATEGORY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JOURNALCATEGORY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISCORRECTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISCORRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISCREDIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISCREDIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACKNOWLEDGEMENTDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACKNOWLEDGEMENTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOCUMENTDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOCUMENTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOCUMENTNUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOCUMENTNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LEDGERNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LEDGERNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GENERALJOURNALACCOUNTENTRYRECID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GENERALJOURNALACCOUNTENTRYRECID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCOUNTDISPLAYVALUE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCOUNTDISPLAYVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARTITION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARTITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTACCOUNT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTACCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTINVOICE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTINVOICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENDACCOUNT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDACCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENDINVOICE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDINVOICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUSTSETTLEINVOICE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUSTSETTLEINVOICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENDSETTLEINVOICE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VENDSETTLEINVOICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAAREAID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATAAREAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYNCSTARTDATETIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYNCSTARTDATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.CRM_Connect.My.MySettings.Default.SQLDataLakeConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNUMBER, V"& _ 
                "OUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYCODE, TR"& _ 
                "ANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURRENCYDEBITAMOUNT, TRANSACTIONCURREN"& _ 
                "CYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGCURRENCYAMOUNT, DESCRIPTION, QUANTI"& _ 
                "TY, POSTINGTYPE, JOURNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, D"& _ 
                "OCUMENTDATE, DOCUMENTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUN"& _ 
                "TDISPLAYVALUE, PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINVOICE, CU"& _ 
                "STSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID FROM db"& _ 
                "o.GeneralJournalAccountEntryStaging"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNU"& _ 
                "MBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYC"& _ 
                "ODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURR"& _ 
                "ENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGC"& _ 
                "URRENCYAMOUNT, DESCRIPTION, QUANTITY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         POSTINGTYPE, JO"& _ 
                "URNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUME"& _ 
                "NTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINV"& _ 
                "OICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            GeneralJournalAccountEntryStaging"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (DOCUMENTNUMBE"& _ 
                "R = @DocumentNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocumentNo", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "DOCUMENTNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNU"& _ 
                "MBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYC"& _ 
                "ODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURR"& _ 
                "ENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGC"& _ 
                "URRENCYAMOUNT, DESCRIPTION, QUANTITY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         POSTINGTYPE, JO"& _ 
                "URNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUME"& _ 
                "NTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINV"& _ 
                "OICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            GeneralJournalAccountEntryStaging"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (JOURNALNUMBER"& _ 
                " > @LastJournalNo)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastJournalNo", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "JOURNALNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNU"& _ 
                "MBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYC"& _ 
                "ODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURR"& _ 
                "ENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGC"& _ 
                "URRENCYAMOUNT, DESCRIPTION, QUANTITY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         POSTINGTYPE, JO"& _ 
                "URNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUME"& _ 
                "NTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINV"& _ 
                "OICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            GeneralJournalAccountEntryStaging"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (GENERALJOURNA"& _ 
                "LACCOUNTENTRYRECID > @LastRecordID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastRecordID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "GENERALJOURNALACCOUNTENTRYRECID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        DEFINITIONGROUP, EXECUTIONID, ISSELECTED, TRANSFERSTATUS, JOURNALNU"& _ 
                "MBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT, TRANSACTIONCURRENCYC"& _ 
                "ODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURR"& _ 
                "ENCYDEBITAMOUNT, TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURRENCYAMOUNT, REPORTINGC"& _ 
                "URRENCYAMOUNT, DESCRIPTION, QUANTITY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         POSTINGTYPE, JO"& _ 
                "URNALCATEGORY, ISCORRECTION, ISCREDIT, ACKNOWLEDGEMENTDATE, DOCUMENTDATE, DOCUME"& _ 
                "NTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACCOUNTDISPLAYVALUE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                       PARTITION, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINV"& _ 
                "OICE, CUSTSETTLEINVOICE, VENDSETTLEINVOICE, DATAAREAID, SYNCSTARTDATETIME, RECID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            GeneralJournalAccountEntryStaging"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (JOURNALNUMBER"& _ 
                " = @JournalNumber)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JournalNumber", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "JOURNALNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable = New dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByDocumentNo(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable, ByVal DocumentNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DocumentNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DocumentNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DocumentNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDocumentNo(ByVal DocumentNo As String) As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DocumentNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DocumentNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DocumentNo,String)
            End If
            Dim dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable = New dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFromLastJournalNo(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable, ByVal LastJournalNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (LastJournalNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastJournalNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LastJournalNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFromLastJournalNo(ByVal LastJournalNo As String) As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (LastJournalNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastJournalNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LastJournalNo,String)
            End If
            Dim dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable = New dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFromLastRecordID(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable, ByVal LastRecordID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LastRecordID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFromLastRecordID(ByVal LastRecordID As Long) As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LastRecordID,Long)
            Dim dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable = New dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByJournalNumber(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable, ByVal JournalNumber As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (JournalNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("JournalNumber")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(JournalNumber,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByJournalNumber(ByVal JournalNumber As String) As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (JournalNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("JournalNumber")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(JournalNumber,String)
            End If
            Dim dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable = New dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsSQLDataLake.GeneralJournalAccountEntryStagingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsSQLDataLake) As Integer
            Return Me.Adapter.Update(dataSet, "GeneralJournalAccountEntryStaging")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal DEFINITIONGROUP As String,  _
                    ByVal EXECUTIONID As String,  _
                    ByVal ISSELECTED As Integer,  _
                    ByVal TRANSFERSTATUS As Integer,  _
                    ByVal JOURNALNUMBER As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal ACCOUNTINGDATE As Date,  _
                    ByVal POSTINGLAYER As Integer,  _
                    ByVal LEDGERACCOUNT As String,  _
                    ByVal TRANSACTIONCURRENCYCODE As String,  _
                    ByVal TRANSACTIONCURRENCYCREDITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYDEBITAMOUNT As Decimal,  _
                    ByVal TRANSACTIONCURRENCYAMOUNT As Decimal,  _
                    ByVal ACCOUNTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal REPORTINGCURRENCYAMOUNT As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal QUANTITY As Decimal,  _
                    ByVal POSTINGTYPE As Integer,  _
                    ByVal JOURNALCATEGORY As Integer,  _
                    ByVal ISCORRECTION As Integer,  _
                    ByVal ISCREDIT As Integer,  _
                    ByVal ACKNOWLEDGEMENTDATE As Date,  _
                    ByVal DOCUMENTDATE As Date,  _
                    ByVal DOCUMENTNUMBER As String,  _
                    ByVal LEDGERNAME As String,  _
                    ByVal GENERALJOURNALACCOUNTENTRYRECID As Long,  _
                    ByVal ACCOUNTDISPLAYVALUE As String,  _
                    ByVal PARTITION As String,  _
                    ByVal CUSTACCOUNT As String,  _
                    ByVal CUSTINVOICE As String,  _
                    ByVal VENDACCOUNT As String,  _
                    ByVal VENDINVOICE As String,  _
                    ByVal CUSTSETTLEINVOICE As String,  _
                    ByVal VENDSETTLEINVOICE As String,  _
                    ByVal DATAAREAID As String,  _
                    ByVal SYNCSTARTDATETIME As Date,  _
                    ByVal RECID As Long) As Integer
            If (DEFINITIONGROUP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEFINITIONGROUP")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEFINITIONGROUP,String)
            End If
            If (EXECUTIONID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EXECUTIONID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EXECUTIONID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ISSELECTED,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANSFERSTATUS,Integer)
            If (JOURNALNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("JOURNALNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(JOURNALNUMBER,String)
            End If
            If (VOUCHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VOUCHER")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VOUCHER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ACCOUNTINGDATE,Date)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(POSTINGLAYER,Integer)
            If (LEDGERACCOUNT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LEDGERACCOUNT")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LEDGERACCOUNT,String)
            End If
            If (TRANSACTIONCURRENCYCODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRANSACTIONCURRENCYCODE")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TRANSACTIONCURRENCYCODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(TRANSACTIONCURRENCYCREDITAMOUNT,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(TRANSACTIONCURRENCYDEBITAMOUNT,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(TRANSACTIONCURRENCYAMOUNT,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(ACCOUNTINGCURRENCYAMOUNT,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(REPORTINGCURRENCYAMOUNT,Decimal)
            If (DESCRIPTION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTION")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DESCRIPTION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(QUANTITY,Decimal)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(POSTINGTYPE,Integer)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(JOURNALCATEGORY,Integer)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(ISCORRECTION,Integer)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(ISCREDIT,Integer)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(ACKNOWLEDGEMENTDATE,Date)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(DOCUMENTDATE,Date)
            If (DOCUMENTNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DOCUMENTNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(DOCUMENTNUMBER,String)
            End If
            If (LEDGERNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LEDGERNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(LEDGERNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(GENERALJOURNALACCOUNTENTRYRECID,Long)
            If (ACCOUNTDISPLAYVALUE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ACCOUNTDISPLAYVALUE")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ACCOUNTDISPLAYVALUE,String)
            End If
            If (PARTITION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARTITION")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PARTITION,String)
            End If
            If (CUSTACCOUNT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTACCOUNT")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(CUSTACCOUNT,String)
            End If
            If (CUSTINVOICE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTINVOICE")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(CUSTINVOICE,String)
            End If
            If (VENDACCOUNT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VENDACCOUNT")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(VENDACCOUNT,String)
            End If
            If (VENDINVOICE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VENDINVOICE")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(VENDINVOICE,String)
            End If
            If (CUSTSETTLEINVOICE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CUSTSETTLEINVOICE")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(CUSTSETTLEINVOICE,String)
            End If
            If (VENDSETTLEINVOICE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VENDSETTLEINVOICE")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(VENDSETTLEINVOICE,String)
            End If
            If (DATAAREAID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATAAREAID")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(DATAAREAID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(SYNCSTARTDATETIME,Date)
            Me.Adapter.InsertCommand.Parameters(36).Value = CType(RECID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_GeneralJournalEntryDiffTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_GeneralJournalEntryDiff"
            tableMapping.ColumnMappings.Add("JOURNALNUMBER", "JOURNALNUMBER")
            tableMapping.ColumnMappings.Add("VOUCHER", "VOUCHER")
            tableMapping.ColumnMappings.Add("ACCOUNTINGDATE", "ACCOUNTINGDATE")
            tableMapping.ColumnMappings.Add("POSTINGLAYER", "POSTINGLAYER")
            tableMapping.ColumnMappings.Add("LEDGERACCOUNT", "LEDGERACCOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYCODE", "TRANSACTIONCURRENCYCODE")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYCREDITAMOUNT", "TRANSACTIONCURRENCYCREDITAMOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYDEBITAMOUNT", "TRANSACTIONCURRENCYDEBITAMOUNT")
            tableMapping.ColumnMappings.Add("TRANSACTIONCURRENCYAMOUNT", "TRANSACTIONCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("ACCOUNTINGCURRENCYAMOUNT", "ACCOUNTINGCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("REPORTINGCURRENCYAMOUNT", "REPORTINGCURRENCYAMOUNT")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY")
            tableMapping.ColumnMappings.Add("POSTINGTYPE", "POSTINGTYPE")
            tableMapping.ColumnMappings.Add("JOURNALCATEGORY", "JOURNALCATEGORY")
            tableMapping.ColumnMappings.Add("ISCORRECTION", "ISCORRECTION")
            tableMapping.ColumnMappings.Add("ISCREDIT", "ISCREDIT")
            tableMapping.ColumnMappings.Add("ACKNOWLEDGEMENTDATE", "ACKNOWLEDGEMENTDATE")
            tableMapping.ColumnMappings.Add("DOCUMENTDATE", "DOCUMENTDATE")
            tableMapping.ColumnMappings.Add("DOCUMENTNUMBER", "DOCUMENTNUMBER")
            tableMapping.ColumnMappings.Add("LEDGERNAME", "LEDGERNAME")
            tableMapping.ColumnMappings.Add("GENERALJOURNALACCOUNTENTRYRECID", "GENERALJOURNALACCOUNTENTRYRECID")
            tableMapping.ColumnMappings.Add("ACCOUNTDISPLAYVALUE", "ACCOUNTDISPLAYVALUE")
            tableMapping.ColumnMappings.Add("CUSTACCOUNT", "CUSTACCOUNT")
            tableMapping.ColumnMappings.Add("CUSTINVOICE", "CUSTINVOICE")
            tableMapping.ColumnMappings.Add("VENDACCOUNT", "VENDACCOUNT")
            tableMapping.ColumnMappings.Add("VENDINVOICE", "VENDINVOICE")
            tableMapping.ColumnMappings.Add("CUSTSETTLEINVOICE", "CUSTSETTLEINVOICE")
            tableMapping.ColumnMappings.Add("VENDSETTLEINVOICE", "VENDSETTLEINVOICE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.CRM_Connect.My.MySettings.Default.SQLDataLakeConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        JOURNALNUMBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT"& _ 
                ", TRANSACTIONCURRENCYCODE, TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURRENCYD"& _ 
                "EBITAMOUNT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURR"& _ 
                "ENCYAMOUNT, REPORTINGCURRENCYAMOUNT, DESCRIPTION, QUANTITY, POSTINGTYPE, JOURNAL"& _ 
                "CATEGORY, ISCORRECTION, ISCREDIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ACKNOWLEDGEMENTDATE"& _ 
                ", DOCUMENTDATE, DOCUMENTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACC"& _ 
                "OUNTDISPLAYVALUE, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINVOICE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 CUSTSETTLEINVOICE, VENDSETTLEINVOICE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VW_Genera"& _ 
                "lJournalEntryDiff"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY JOURNALNUMBER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        JOURNALNUMBER, VOUCHER, ACCOUNTINGDATE, POSTINGLAYER, LEDGERACCOUNT"& _ 
                ", TRANSACTIONCURRENCYCODE, TRANSACTIONCURRENCYCREDITAMOUNT, TRANSACTIONCURRENCYD"& _ 
                "EBITAMOUNT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TRANSACTIONCURRENCYAMOUNT, ACCOUNTINGCURR"& _ 
                "ENCYAMOUNT, REPORTINGCURRENCYAMOUNT, DESCRIPTION, QUANTITY, POSTINGTYPE, JOURNAL"& _ 
                "CATEGORY, ISCORRECTION, ISCREDIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ACKNOWLEDGEMENTDATE"& _ 
                ", DOCUMENTDATE, DOCUMENTNUMBER, LEDGERNAME, GENERALJOURNALACCOUNTENTRYRECID, ACC"& _ 
                "OUNTDISPLAYVALUE, CUSTACCOUNT, CUSTINVOICE, VENDACCOUNT, VENDINVOICE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 CUSTSETTLEINVOICE, VENDSETTLEINVOICE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VW_Genera"& _ 
                "lJournalEntryDiff"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ACCOUNTINGDATE >= @VonDatum AND ACCOUNTINGDATE "& _ 
                "<= @BisDatum)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY JOURNALNUMBER"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VonDatum", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCOUNTINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BisDatum", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCOUNTINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable = New dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByAccountingDate(ByVal dataTable As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable, ByVal VonDatum As Date, ByVal BisDatum As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(VonDatum,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(BisDatum,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByAccountingDate(ByVal VonDatum As Date, ByVal BisDatum As Date) As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(VonDatum,Date)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(BisDatum,Date)
            Dim dataTable As dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable = New dsSQLDataLake.VW_GeneralJournalEntryDiffDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _generalJournalAccountEntryStagingTableAdapter As GeneralJournalAccountEntryStagingTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property GeneralJournalAccountEntryStagingTableAdapter() As GeneralJournalAccountEntryStagingTableAdapter
            Get
                Return Me._generalJournalAccountEntryStagingTableAdapter
            End Get
            Set
                Me._generalJournalAccountEntryStagingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._generalJournalAccountEntryStagingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._generalJournalAccountEntryStagingTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsSQLDataLake, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.GeneralJournalAccountEntryStaging.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._generalJournalAccountEntryStagingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsSQLDataLake, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.GeneralJournalAccountEntryStaging.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._generalJournalAccountEntryStagingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsSQLDataLake, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.GeneralJournalAccountEntryStaging.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._generalJournalAccountEntryStagingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsSQLDataLake) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._generalJournalAccountEntryStagingTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA"& _ 
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes"& _ 
                        "t.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst"& _ 
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt"& _ 
                        "ion nicht zu.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._generalJournalAccountEntryStagingTableAdapter, Me._generalJournalAccountEntryStagingTableAdapter.Connection)
                    Me._generalJournalAccountEntryStagingTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._generalJournalAccountEntryStagingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._generalJournalAccountEntryStagingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._generalJournalAccountEntryStagingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._generalJournalAccountEntryStagingTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._generalJournalAccountEntryStagingTableAdapter) Is Nothing) Then
                    Me._generalJournalAccountEntryStagingTableAdapter.Connection = CType(revertConnections(Me._generalJournalAccountEntryStagingTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._generalJournalAccountEntryStagingTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
